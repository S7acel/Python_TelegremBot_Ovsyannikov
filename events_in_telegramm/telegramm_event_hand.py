"""–ò–º–ø–æ—Ä—Ç –∞–ø–∏ —Ç–æ–∫–µ–Ω–∞, –∫–ª–∞—Å—Å–∞ Calendar, –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
from secrets import API_TOKEN
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Updater,
    Filters,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
)
from calendar_class import Calendar

(DETAILS, DATE, TIME, CREATE, READ_EVENT, CHECK_EXIST, ASK_FOR_CHANGE,
 EDIT_EVENT, CHOOSE_TO_DELETE) = range(9)

"""
–§—É–Ω–∫—Ü–∏–∏ ask_event_details, ask_event_name, ask_event_date, ask_event_time -
—Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –∫–ª—é—á–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ.
–°–∞–º –∫–ª—é—á - –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ç–æ, –Ω–∞ –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–Ω –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
"""



def start(update, context):
    """–ü—Ä–∏–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"""
    (update.message.reply_text("""
*–ü—Ä–∏–≤–µ—Ç!* –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è. 

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É */create*. –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É */display*. –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É */delete_all*. –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É */delete*. –ß—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É */edit*. –ß—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É */read*.

–ù–∞–¥–µ—é—Å—å, —è —Å–º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–≤–æ–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏! ü§ñ

""", parse_mode='markdown'))

def cancel(update, _context):
    """–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END


def ask_event_name(update, _context):
    """–°–ø—Ä–∞—à–∏–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    update.message.reply_text(
        f"{update.message.from_user.username}, –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"
    )
    return DETAILS


def ask_event_details(update, context):
    """–°–ø—Ä–∞—à–∏–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è"""
    context.chat_data["event_name"] = update.message.text
    update.message.reply_text(
        f'–ù–∞–ø–∏—à–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏—è "{context.chat_data["event_name"]}"'
    )
    return DATE


def ask_event_date(update, context):
    """–°–ø—Ä–∞—à–∏–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è"""
    context.chat_data["details"] = update.message.text
    update.message.reply_text("–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥/–º–º/–≥–≥")
    return TIME


def ask_event_time(update, context):
    """–°–ø—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    context.chat_data["date"] = update.message.text
    update.message.reply_text("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX:XX")
    return CREATE


def create_event_handler(update, context):
    """–ü–æ—Å–ª–µ —Å–ø—Ä–∞—à–∏–≤–∞–Ω–∏—è –≤—Å–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏,
    –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∫–ª–∞—Å—Å–µ Calendar.
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª events.json"""
    event_data = {'event_name': context.chat_data["event_name"],
                  'details': context.chat_data["details"],
                  'event_date': context.chat_data["date"],
                  'event_time': update.message.text,
                  'chat_id': update.message.chat_id}
    event_id = Calendar.create_and_add_event_to_file(context.chat_data["event_name"],context.chat_data["details"],
                                                     context.chat_data["date"], update.message.text,
                                                     update.message.chat_id)
    context.bot.send_message(
        chat_id=update.message.chat_id,
        text=f"–°–æ–±—ã—Ç–∏–µ {context.chat_data['event_name']} —Å–æ–∑–¥–∞–Ω–æ —Å –Ω–æ–º–µ—Ä–æ–º {event_id}.",

    )
    return ConversationHandler.END


def choose_event(update, context):
    """–í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ return_user_events.
    –û–Ω –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ
    '–ò–ú–Ø (ID)'"""
    context.chat_data["events_function"] = update.message.text
    if Calendar.return_user_events(update.message.chat_id):  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏–π
        context.chat_data["all_events"] = Calendar.return_user_events(update.message.chat_id)
        buttons = [[]]
        for event in context.chat_data['all_events']:
            name = event[list(event.keys())[0]]['name']
            id_of_event = list(event.keys())[0]
            buttons[0].append(f"{name} ({id_of_event})")  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º—ë–Ω
        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–±—ã—Ç–∏—é - —Å–ª–æ–≤–∞—Ä—é –≤ —Å–ø–∏—Å–∫–µ
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ:", reply_markup=ReplyKeyboardMarkup(
            buttons,
            one_time_keyboard=True))
        return CHECK_EXIST
    update.message.reply_text("–°–æ–±—ã—Ç–∏–π - –Ω–µ—Ç")
    return ConversationHandler.END


def check_exist_of_event(update, context):
    """–í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏ –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.
    –í —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è, —Å–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ
    –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏ –æ –µ–≥–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏.
    –¢–∞–∫ –∂–µ –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é,
     –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã"""
    ReplyKeyboardRemove()
    event = update.message.text
    event_id = event.split()[-1].strip('()')  # –ø–æ–ª—É—á–µ–Ω–∏–µ id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    found_event = False
    for dict_event in context.chat_data["all_events"]:  # –∏—Ç–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if list(dict_event.keys())[0] == event_id:
            found_event = True
            context.chat_data["event"] = dict_event  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
            break
    if not found_event:
        update.message.reply_text("–¢–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return ConversationHandler.END

    match context.chat_data["events_function"].lower():
        case "/read":
            return read_event_handler(update, context)
        case "/edit":
            return edit_event_handler(update, context)
        case "/delete":
            return delete_event_handler(update, context)


def read_event_handler(update, context):
    """–í—ã–≤–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω."""
    event = context.chat_data['event']
    event_id = list(event.keys())[0]
    update.message.reply_text(f"""
id: {event_id}
–ò–º—è: {event[event_id]['name']}
–î–µ—Ç–∞–ª–∏: {event[event_id]['details']}
–î–∞—Ç–∞: {event[event_id]['event_date']}
–í—Ä–µ–º—è: {event[event_id]['event_time']}
""")
    return ConversationHandler.END


def display_events(update, context):
    """–ò—Ç–µ—Ä–∞—Ü–∏—è –∏ –ø–æ–∫–∞–∑ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—Å—è"""
    if Calendar.return_user_events(update.message.chat_id):
        context.chat_data["all_events"] = Calendar.return_user_events(update.message.chat_id)
        for d in context.chat_data['all_events']:
            update.message.reply_text(f"""
Id —Å–æ–±—ã—Ç–∏—è: {list(d.keys())[0]}
–ò–º—è —Å–æ–±—ã—Ç–∏—è: {list(d.values())[0]['name']}
–¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è: {list(d.values())[0]["details"]}
–¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è: {list(d.values())[0]['event_date']}
–≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: {list(d.values())[0]["event_time"]}
""")
        return ConversationHandler.END

    update.message.reply_text("–°–æ–±—ã—Ç–∏–π - –Ω–µ—Ç", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def delete_event_handler(update, context):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∑–∞ —Å—á–µ—Ç –º–µ—Ç–æ–¥–∞ delete_user_events."""
    event = context.chat_data['event']
    event_id = list(event.keys())[0]
    result = Calendar.delete_user_events(update.message.chat_id, event_id)
    update.message.reply_text(f"{result}")
    return ConversationHandler.END


def edit_event_handler(update, context):
    """–§—É–Ω–∫—Ü–∏—è —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ö–æ—Ç–∏–º –∏–∑–º–µ–Ω–∏—Ç—å."""
    ReplyKeyboardRemove()
    buttons = [['–∏–º—è', '–¥–µ—Ç–∞–ª–∏', '–¥–∞—Ç–∞', '–≤—Ä–µ–º—è']]

    update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=ReplyKeyboardMarkup(
        buttons,
        one_time_keyboard=True))  # –¥–æ–±–∞–≤–∏—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–ª–µ —Ç–µ–∫—Å—Ç–∞
    return ASK_FOR_CHANGE


def ask_for_write_new_text(update, context):
    """–î–∞–ª–µ–µ, –ø–æ—Å–ª–µ —Å–ø—Ä–∞—à–∏–≤–∞–Ω–∏—è, –æ —Ç–æ–º –∫–∞–∫–æ–µ –æ–±—ä–µ–∫—Ç –∏–∑–º–µ–Ω—è–µ–º,
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞ –∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç –º—ã —Ö–æ—Ç–∏–º –∏–∑–º–µ–Ω–∏—Ç—å"""
    update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç', reply_markup=ReplyKeyboardRemove())
    match update.message.text:
        case '–∏–º—è':
            context.chat_data['edit_object'] = 'name'
        case '–¥–µ—Ç–∞–ª–∏':
            context.chat_data['edit_object'] = 'details'
        case '–¥–∞—Ç–∞':
            context.chat_data['edit_object'] = 'event_date'
        case '–≤—Ä–µ–º—è':
            context.chat_data['edit_object'] = 'event_time'
        case _:
            update.message.reply_text('–¢–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è - –Ω–µ—Ç')
            return ConversationHandler.END
    return EDIT_EVENT


def edit_event(update, context):
    """–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    edit_user_events –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è """
    event = context.chat_data['event']
    event_id = list(event.keys())[0]
    result = Calendar.edit_user_events(update.message.chat_id, event_id,
                                       context.chat_data['edit_object'], update.message.text)
    update.message.reply_text(f'{result}')
    return ConversationHandler.END


def delete_all_events(update, context):
    """–°–ø—Ä–∞—à–∏–≤–∞–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫"""
    update.message.reply_text("""*–í—ã —É–≤–µ—Ä–µ–Ω—ã?*
–î–∞-'Y'/–ù–µ—Ç-'N'
""", parse_mode='Markdown')
    return CHOOSE_TO_DELETE

def check_chose_to_delete(update, context):
    """–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è - —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    (–° –ø–æ–º–æ—â—å—é –∏—Ç–µ—Ä–∞—Ü–∏ —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ delete_user_events)"""
    chose = update.message.text
    if chose.lower() == 'y':
        if Calendar.return_user_events(update.message.chat_id):  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏–π
            context.chat_data["all_events"] = Calendar.return_user_events(update.message.chat_id)
            for event in context.chat_data['all_events']:
                id_of_event = list(event.keys())[0]
                result = Calendar.delete_user_events(update.message.chat_id, id_of_event)
                update.message.reply_text(f"{result}")
            update.message.reply_text("*–í—Å–µ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!*", parse_mode='markdown')
            return ConversationHandler.END
        update.message.reply_text("–°–æ–±—ã—Ç–∏–π - –Ω–µ—Ç")
        return ConversationHandler.END
    update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
    return ConversationHandler.END

conversation_handler = ConversationHandler(
    entry_points=[
        CommandHandler("create", ask_event_name),
        CommandHandler("read", choose_event),
        CommandHandler('delete', choose_event),
        CommandHandler('edit', choose_event),
        CommandHandler('display', display_events),
        CommandHandler('delete_all', delete_all_events),
    ],
    states={
        DETAILS: [MessageHandler(Filters.text & ~Filters.command, ask_event_details)],
        DATE: [MessageHandler(Filters.text & ~Filters.command, ask_event_date)],
        TIME: [MessageHandler(Filters.text & ~Filters.command, ask_event_time)],
        CREATE: [MessageHandler(Filters.text & ~Filters.command, create_event_handler)],
        CHECK_EXIST: [MessageHandler(Filters.text & ~Filters.command, check_exist_of_event)],
        ASK_FOR_CHANGE: [MessageHandler(Filters.text & ~Filters.command, ask_for_write_new_text)],
        EDIT_EVENT: [MessageHandler(Filters.text & ~Filters.command, edit_event)],
        CHOOSE_TO_DELETE: [MessageHandler(Filters.text & ~Filters.command, check_chose_to_delete)],

    },
    fallbacks=[CommandHandler("cancel", cancel)],
)


def main():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ conversation handler, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater(token=API_TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(conversation_handler)
    dispatcher.add_handler(CommandHandler("start", start))
    updater.start_polling()


if __name__ == "__main__":
    main()
