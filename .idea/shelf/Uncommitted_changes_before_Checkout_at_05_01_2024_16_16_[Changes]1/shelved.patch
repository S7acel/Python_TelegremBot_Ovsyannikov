Index: do_not_save_files/secrets.py
===================================================================
diff --git a/do_not_save_files/secrets.py b/do_not_save_files/secrets.py
new file mode 100644
--- /dev/null	
+++ b/do_not_save_files/secrets.py	
@@ -0,0 +1,1 @@
+API_TOKEN = "6866823757:AAFPOD31nZSBvA587bJ1Gu8TLjdTRe8E79g"
\ No newline at end of file
Index: Commits/commits_info_telegram_events.md
===================================================================
diff --git a/Commits/commits_info_telegram_events.md b/Commits/commits_info_telegram_events.md
new file mode 100644
--- /dev/null	
+++ b/Commits/commits_info_telegram_events.md	
@@ -0,0 +1,23 @@
+1. В задании требовалось задать глобально объект класса.
+   Например:
+
+   ```python
+   calendar = Calendar()
+   ```
+
+   Но я использовал декоратор ```@classmethod```  (1-ым атрибутом становится класс, а не объект в методе) и словарь events
+   стал атрибутом класса, а не объекта.
+   
+   Я считаю, что в этом нет смысла, т.к. объект создавался исключительно для того,
+   чтобы в нем с помощью конструктора класса создать список events.
+   Но если я не прав, то прошу предупредить об этом заранее, если
+   объект calendar - понадобиться использовать в дальнейшем. :)
+
+2. Я не уверен на счет правильности, но я на всякий случай в классе Calendar - добавил во все методы функцию обновления
+   событий (```Calendar.update_events()```) и я не уверен, где это обязательно, я где нет.
+
+3. Следующее задание (Номер 9) - требует сделать рефакторинг кода, а точнее - удалить ненужные функции.
+   Проблема вся в том, что события - я начал делать в новом файле, потому что было очень неудобно и получается,
+   что 9 задание - я уже решил. Можете, пожалуйста просмотреть мой код, в частности в
+   файле [telegramm_event_hand.py](..%2Fevents_in_telegramm%2Ftelegramm_event_hand.py) и сказать,
+   что в ней можно переделать? Я думаю, что там явно есть что исправлять. Как минимум логику функций. :)
Index: do_not_save_files/test123.py
===================================================================
diff --git a/do_not_save_files/test123.py b/do_not_save_files/test123.py
new file mode 100644
--- /dev/null	
+++ b/do_not_save_files/test123.py	
@@ -0,0 +1,50 @@
+from secrets import API_TOKEN
+from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
+from telegram.ext import ConversationHandler, CommandHandler, MessageHandler, Filters, Updater
+
+# определение состояний диалога
+FIRST, SECOND = range(2)
+
+
+# функция, вызываемая при входе в состояние FIRST
+def start(update, context):
+    reply_keyboard = [['Option 1', 'Option 2', 'XD']]
+    update.message.reply_text(
+        'Hi! My name is Bot. Please choose an option.',
+        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
+    return FIRST
+
+
+# функция, вызываемая при входе в состояние SECOND
+def option(update, context):
+    user_choice = update.message.text
+    update.message.reply_text(f'You chose {user_choice}. Thanks for choosing!', reply_markup=ReplyKeyboardRemove())
+    return ConversationHandler.END
+
+
+# функция, вызываемая при выходе из диалога
+def cancel(update, context):
+    update.message.reply_text('Goodbye!', reply_markup=ReplyKeyboardRemove())
+    return ConversationHandler.END
+
+
+# создание объекта ConversationHandler
+conv_handler = ConversationHandler(
+    entry_points=[CommandHandler('start', start)],
+    states={
+        FIRST: [MessageHandler(Filters.text & ~Filters.command, option)],
+    },
+    fallbacks=[CommandHandler('cancel', cancel)]
+)
+
+
+def main():
+    updater = Updater(token=API_TOKEN, use_context=True)
+    dispatcher = updater.dispatcher
+    updater.start_polling()
+    # добавление объекта ConversationHandler в диспетчер
+    dispatcher.add_handler(conv_handler)
+
+
+if __name__ == '__main__':
+    main()
